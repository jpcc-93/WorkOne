@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "Profesor",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1789382715 { 
   	label=Materia
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Materia1789382715[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Materia</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   codigoMateria: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   descripcion: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nombre: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nota: float [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ mostrarTodas(materias: Materia[])</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_1964228900 { 
   	label=Alumno
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Alumno1964228900[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Alumno</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   materias: Materia[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   promedio: float [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ buscarTodoslosalumnos(alumnos: Alumno[]): float</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMaterias(codigoMateria: int): float</TD></TR>
<TR><TD ALIGN="LEFT" >+ mostrarFganan(alumnos: Alumno[])</TD></TR>
<TR><TD ALIGN="LEFT" >+ mostrarHganan(alumnos: Alumno[])</TD></TR>
<TR><TD ALIGN="LEFT" >+ mostrarTodoslosalumnos(alumnos: Alumno[])</TD></TR>
<TR><TD ALIGN="LEFT" >+ mostrarnotas()</TD></TR>
<TR><TD ALIGN="LEFT" >+ mostrarpromedio38(alumnos: Alumno[])</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_937731574 { 
   	label=Profesor
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Profesor937731574[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Profesor</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   m1: Materia [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   m2: Materia [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   m3: Materia [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   nombre: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ mostrarTodos(profesores: Profesor[])</TD></TR>
<TR><TD ALIGN="LEFT" >+ mostrardatos()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_986212236 { 
   	label=Persona
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Persona986212236[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Persona</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   genero: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   iD: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nombre: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tel: String [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
Alumno1964228900 -> Materia1789382715[label="materias
[0..*]"];
Persona986212236 -> Alumno1964228900[arrowhead=none, arrowtail=empty, dir=both];
Persona986212236 -> Profesor937731574[arrowhead=none, arrowtail=empty, dir=both];
Profesor937731574 -> Materia1789382715[label="m1
[0..1]"];
Profesor937731574 -> Materia1789382715[label="m2
[0..1]"];
Profesor937731574 -> Materia1789382715[label="m3
[0..1]"];
    
}
@enduml